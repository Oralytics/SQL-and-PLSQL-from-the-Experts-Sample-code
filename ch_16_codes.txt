grant references (empno) on emp to hr
/

select * from scott.emp
/

create or replace view vw_emp
as
select * from emp
where ename = USER
with check option;

revoke select, insert, update, delete on emp from smith, allen;

grant select, insert, update, delete on vw_emp to smith, allen;

conn allen/allen
create synonym emp for scott.vw_emp;

conn smith/smith
create synonym emp for scott.vw_emp;

update emp set sal = 2300;

insert into emp values (1003,'ALLEN','PRODUCER','7698',sysdate,2200,null,30);

insert into emp values (1002,'BOB','PRODUCER','7698',sysdate,2200,null,30);

CREATE OR REPLACE FUNCTION authorized_emps (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return_val   VARCHAR2 (2000);
BEGIN
   l_return_val := 'SAL <= 1500';
   RETURN l_return_val;
END;
/

DECLARE
   l_return_string   VARCHAR2 (2000);
BEGIN
   l_return_string := authorized_emps ('X', 'X');
   DBMS_OUTPUT.put_line ('Return String = ' || l_return_string);
END;
/

BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY',
      function_schema      => 'SCOTT',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'INSERT, UPDATE, DELETE, SELECT'
   );
END;
/

grant select, insert, update, delete on scott.emp to allen;

SELECT * FROM scott.emp
WHERE sal <= 1500;

DELETE scott.emp;

UPDATE scott.emp SET comm = 100;

SELECT policy_name, pf_owner, function, sel, ins, upd, del, idx, chk_option
FROM dba_policies
WHERE object_owner = 'SCOTT'
AND object_name = 'EMP';

UPDATE scott.emp SET sal = 1200;

UPDATE scott.emp SET sal = 1100;

UPDATE scott.emp SET sal = 1600;

UPDATE scott.emp SET sal = 1100;

BEGIN
   DBMS_RLS.drop_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY'
   );
END;
/

BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY',
      function_schema      => 'SCOTT',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'INSERT, UPDATE, DELETE, SELECT',
      update_check         => TRUE
   );
END;
/

UPDATE scott.emp SET sal = 1600;

BEGIN
   DBMS_RLS.drop_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY'
   );
END;
/
BEGIN
   DBMS_RLS.add_policy (
	object_schema    => 'SCOTT',
      object_name      => 'EMP',
      policy_name      => 'EMP_POLICY',
      function_schema  => 'SCOTT',
      policy_function  => 'AUTHORIZED_EMPS',
      statement_types  => 'INSERT, UPDATE, DELETE, SELECT',
      update_check     => TRUE,
      static_policy    => TRUE
   );
END;
/

CREATE TABLE func_execs
(
   val number
);
Insert just a single row into the table.
INSERT INTO func_execs values (1);
COMMIT;

CREATE OR REPLACE FUNCTION authorized_emps (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return_val   VARCHAR2 (2000);
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   l_return_val := 'SAL <= ' || TO_NUMBER (TO_CHAR (SYSDATE, 'ss')) * 100;
   UPDATE func_execs
      SET val = val + 1;
   COMMIT;
   RETURN l_return_val;
END;
/

BEGIN
   DBMS_RLS.drop_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY'
   );
END;
/

BEGIN
   DBMS_RLS.add_policy (
	object_schema	   => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY',
      function_schema      => 'SCOTT',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'INSERT, UPDATE, DELETE, SELECT',
      update_check         => TRUE,
      static_policy        => FALSE
   );
END;
/

SELECT COUNT(*) FROM scott.emp;

SELECT * FROM func_execs;

BEGIN
   DBMS_RLS.drop_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY'
   );
END;
/
BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY',
      function_schema      => 'SCOTT',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'INSERT, UPDATE, DELETE, SELECT',
      update_check         => TRUE,
      static_policy        => TRUE
   );
END;
/

UPDATE func_execs SET val = 1;
commit;

CREATE OR REPLACE PACKAGE vpd_pkg
AS
   FUNCTION authorized_emps (
      p_schema_name   IN   VARCHAR2,
      p_object_name   IN   VARCHAR2
   )
      RETURN VARCHAR2;

   PRAGMA RESTRICT_REFERENCES (authorized_emps, WNDS, RNDS, WNPS, RNPS);
END;
/

CREATE OR REPLACE PACKAGE BODY vpd_pkg
AS
   FUNCTION authorized_emps (
      p_schema_name   IN   VARCHAR2,
      p_object_name   IN   VARCHAR2
   )
      RETURN VARCHAR2
   IS
      l_return_val   VARCHAR2 (2000);
   BEGIN
      l_return_val := 
          'SAL <= ' || TO_NUMBER (TO_CHAR (SYSDATE, 'ss')) * 100;
      RETURN l_return_val;
   END;
END;
/

CREATE OR REPLACE FUNCTION authorized_emps (
    p_schema_name   IN   VARCHAR2,
    p_object_name   IN   VARCHAR2
 )
    RETURN VARCHAR2
IS
    l_return_val   VARCHAR2 (2000);
BEGIN
    l_return_val := 'ENAME = USER';
    RETURN l_return_val;
END;
/

CREATE OR REPLACE FUNCTION authorized_emps (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   SELECT deptno
     INTO l_deptno
     FROM emp
    WHERE ename = USER;

   l_return_val := 'DEPTNO = ' || l_deptno;
   RETURN l_return_val;
END;
/

create user vpdowner identified by vpdowner;
grant exempt access policy, create session, create procedure to vpdowner;
grant execute on dbms_rls to vpdowner;
grant select on scott.emp to vpdowner;

conn vpdowner/vpdowner
CREATE OR REPLACE FUNCTION authorized_emps (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      SELECT deptno
        INTO l_deptno
        FROM scott.emp
       WHERE ename = USER;
      l_return_val := 'DEPTNO = ' || l_deptno;
   END IF;
   RETURN l_return_val;
END;
/

BEGIN
   DBMS_RLS.drop_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY'
   );
END;
/
BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'INSERT, UPDATE, DELETE, SELECT',
      update_check         => TRUE,
      static_policy        => FALSE
   );
END;
/

BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'DEPT',
      policy_name          => 'DEPT_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'SELECT, INSERT, UPDATE, DELETE',
      update_check         => TRUE,
      static_policy        => FALSE
   );
END;
/

CREATE OR REPLACE FUNCTION allowed_enames (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
   l_str          VARCHAR2 (2000);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      SELECT deptno
        INTO l_deptno
        FROM scott.emp
       WHERE ename = USER;
      l_str := '(';
      FOR emprec IN (SELECT ename
                       FROM scott.emp
                      WHERE deptno = l_deptno)
      LOOP
         l_str := l_str || '''' || emprec.ename || ''',';
      END LOOP;
      l_str := RTRIM (l_str, ',');
      l_str := l_str || ')';
      l_return_val := 'ENAME IN ' || l_str;
   END IF;
   RETURN l_return_val;
END;
/

conn vpdowner/vpdowner
grant execute on allowed_enames to allen;
conn allen/allen
select vpdowner.allowed_enames ('SCOTT','BONUS') from dual;

conn vpdowner/vpdowner
revoke execute on allowed_enames from allen;

BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'BONUS',
      policy_name          => 'BONUS_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'ALLOWED_ENAMES',
      statement_types      => 'SELECT, INSERT, UPDATE, DELETE',
      update_check         => TRUE
   );
END;
/

CREATE OR REPLACE FUNCTION authorized_emps (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
   l_mgr          BOOLEAN;
   l_empno        NUMBER;
   l_dummy        CHAR (1);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      SELECT deptno, empno
      INTO l_deptno, l_empno
      FROM scott.emp
      WHERE ename = USER;

      BEGIN
         SELECT '1'
           INTO l_dummy
           FROM scott.emp
          WHERE mgr = l_empno AND ROWNUM < 2;

         l_mgr := TRUE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_mgr := FALSE;
         WHEN OTHERS
         THEN
            RAISE;
      END;

      IF (l_mgr)
      THEN
         l_return_val := NULL;
      ELSE
         l_return_val := 'DEPTNO = ' || l_deptno;
      END IF;
   END IF;

   RETURN l_return_val;
END;
/

CREATE OR REPLACE PACKAGE mgr_check
IS
   is_mgr   CHAR (1);
END;
The policy function looks like this.
CREATE OR REPLACE FUNCTION authorized_emps (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      SELECT DISTINCT deptno
                 INTO l_deptno
                 FROM scott.emp
                WHERE ename = USER;

      IF (mgr_check.is_mgr = 'Y')
      THEN
         l_return_val := NULL;
      ELSE
         l_return_val := 'DEPTNO = ' || l_deptno;
      END IF;
   END IF;

   RETURN l_return_val;
END;
/

CREATE OR REPLACE TRIGGER tr_set_mgr
   AFTER LOGON ON DATABASE
DECLARE
   l_empno   NUMBER;
   l_dummy   CHAR (1);
BEGIN
   SELECT DISTINCT empno
              INTO l_empno
              FROM scott.emp
             WHERE ename = USER;
   SELECT '1'
     INTO l_dummy
     FROM scott.emp
    WHERE mgr = l_empno AND ROWNUM < 2;
   vpdowner.mgr_check.is_mgr := 'Y';
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      vpdowner.mgr_check.is_mgr := 'N';
   WHEN OTHERS
   THEN
      RAISE;
END;
/

CREATE OR REPLACE FUNCTION make_read_only (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   -- Only the owner of the table can change
   -- the data in the table.
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      l_return_val := '1=2';
   END IF;
   RETURN l_return_val;
END;
/

BEGIN
    DBMS_RLS.drop_policy (
         object_schema => 'SCOTT',
         object_name   => 'EMP',
         policy_name   => 'EMP_POLICY'
    );
END;
/
BEGIN
   DBMS_RLS.add_policy (
      object_schema    => 'SCOTT',
      object_name      => 'EMP',
      policy_name      => 'EMP_READONLY_POLICY',
      function_schema  => 'VPDOWNER',
      policy_function  => 'MAKE_READ_ONLY',
      statement_types  => 'INSERT, UPDATE, DELETE',
      update_check     => TRUE
   );
END;
/

BEGIN
   DBMS_RLS.enable_policy (
      Object_schema => 'SCOTT',      
      object_name   => 'EMP',
      policy_name   => 'EMP_READONLY_POLICY',
      ENABLE        => FALSE
   );
END;
/

CREATE OR REPLACE FUNCTION make_read_only (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_hr           PLS_INTEGER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      l_hr := TO_NUMBER (TO_CHAR (SYSDATE, 'HH24'));
      IF (USER = 'BATCHUSER')
      -- you can list all users here that should be
      -- read only during the daytime.
      THEN
         IF (l_hr BETWEEN 9 AND 17)
         THEN
            -- make the table read only
            l_return_val := '1=2';
         ELSE
            l_return_val := NULL;
         END IF;
      ELSE
         -- users which need to be read only during after-hours
         IF (l_hr >= 17 AND l_hr <= 9)
         THEN
            -- make the table read only
            l_return_val := '1=2';
         ELSE
            l_return_val := NULL;
         END IF;
      END IF;
   END IF;
   RETURN l_return_val;
END;
/

CREATE OR REPLACE FUNCTION emp_policy (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSIF (USER = 'KING')
   THEN
      IF (
             -- check client machine name
             SYS_CONTEXT ('USERENV', 'HOST') = 'ACMEBANK\KINGLAP'
          AND
             -- check OS username
             SYS_CONTEXT ('USERENV', 'OS_USER') = 'king'
          AND
             -- check IP address
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS') = '192.168.1.1'
         )
      THEN
         -- all checks satisfied for KING; allow unrestricted access.
         l_return_val := NULL;
      ELSE
         -- return the usual predicate
         l_return_val := 'SAL <= 1500';
      END IF;
   ELSE  -- All other users
      l_return_val := 'SAL <= 1500';
   END IF;

   RETURN l_return_val;
END;
/

BEGIN
   -- drop the policy first, if exists.
   DBMS_RLS.drop_policy (
       object_schema      => 'SCOTT',
       object_name        => 'EMP',
       policy_name        => 'EMP_POLICY'
   );
 END;
/
BEGIN  --
   -- add the policy
   DBMS_RLS.add_policy (
       object_schema          => 'SCOTT',
       object_name            => 'EMP',
       policy_name            => 'EMP_POLICY',
       function_schema        => 'VPDOWNER',
       policy_function        => 'AUTHORIZED_EMPS',
       statement_types        => 'INSERT, UPDATE, DELETE, SELECT',
       update_check           => TRUE,
       sec_relevant_cols      => 'SAL, COMM'
   );
END;
/


SELECT   deptno, COUNT (*)
FROM scott.emp
WHERE sal > 0
GROUP BY deptno;

BEGIN
   DBMS_RLS.drop_policy (
      object_schema      => 'SCOTT',
      object_name        => 'EMP',
      policy_name        => 'EMP_POLICY'
   );
   DBMS_RLS.add_policy (
      object_schema              => 'SCOTT',
      object_name                => 'EMP',
      policy_name                => 'EMP_POLICY',
      function_schema            => 'VPDOWNER',
      policy_function            => 'AUTHORIZED_EMPS',
      statement_types            => 'SELECT',
      update_check               => TRUE,
      sec_relevant_cols          => 'SAL, COMM',
      sec_relevant_cols_opt      => DBMS_RLS.all_rows
   );
END;
/

-- drop policies if they exist already
BEGIN
   DBMS_RLS.drop_policy (
      object_schema      => 'SCOTT',
      object_name        => 'DEPT',
      policy_name        => 'EMP_DEPT_POLICY'
   );
   DBMS_RLS.drop_policy (
      object_schema      => 'SCOTT',
      object_name        => 'EMP',
      policy_name        => 'EMP_DEPT_POLICY'
   );
END;
/
BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'DEPT',
      policy_name          => 'EMP_DEPT_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'SELECT, INSERT, UPDATE, DELETE',
      update_check         => TRUE,
      policy_type          => DBMS_RLS.shared_static
   );
 
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_DEPT_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'SELECT, INSERT, UPDATE, DELETE',
      update_check         => TRUE,
      policy_type          => DBMS_RLS.shared_static
   );
END;
/

DECLARE
   l_start   PLS_INTEGER;
   l_count   PLS_INTEGER;
BEGIN
   l_start := DBMS_UTILITY.get_time;

   SELECT COUNT (*)
     INTO l_count
     FROM scott.emp;

   DBMS_OUTPUT.put_line (   
      'Elapsed time = '
      || TO_CHAR (DBMS_UTILITY.get_time - l_start)
      );
END;
/

SELECT DBMS_UTILITY.get_time cstime from dual;
SELECT COUNT (*) FROM scott.emp;
SELECT DBMS_UTILITY.get_time - &timevar from dual;

INSERT /*+ APPEND */
INTO scott.EMP
SELECT *
FROM scott.emp
WHERE rownum < 2;

SELECT sql_text, predicate, policy, object_name
FROM v$sqlarea , v$vpd_policy
WHERE hash_value = sql_hash
/

ALTER SESSION SET EVENTS '10730 trace name context forever, level 12';

UPDATE scott.emp
SET deptno = 50
WHERE empno = 7369;

grant create table to vpdowner;
alter user vpdowner quota unlimited on users;

conn vpdowner/vpdowner
create table emp_access (
   username        varchar2(30) not null,
   deptno          number not null
);

insert into emp_access values ('ALLEN',10);
insert into emp_access values ('ALLEN',20);
insert into emp_access values ('KING',10);
insert into emp_access values ('KING',20);
insert into emp_access values ('KING',30);
insert into emp_access values ('KING',40);
commit;

CREATE CONTEXT dept_ctx USING set_dept_ctx;

CREATE OR REPLACE PROCEDURE set_dept_ctx (
   p_attr IN VARCHAR2, p_val IN VARCHAR2)
IS
BEGIN
   DBMS_SESSION.set_context ('DEPT_CTX', p_attr, p_val);
END;

EXEC set_dept_ctx ('DEPTNO','10')

DECLARE
   l_ret   VARCHAR2 (20);
BEGIN
   l_ret := SYS_CONTEXT ('DEPT_CTX', 'DEPTNO');
   DBMS_OUTPUT.put_line ('Value of DEPTNO = ' || l_ret);
END;
/

BEGIN
  DBMS_SESSION.set_context ('DEPT_CTX', 'DEPTNO', 10);
END;
/

grant execute on dbms_session to vpdowner;
grant create any context to vpdowner;

CREATE CONTEXT dept_ctx USING set_dept_ctx;

CREATE OR REPLACE FUNCTION authorized_emps (
    p_schema_name   IN   VARCHAR2,
    p_object_name   IN   VARCHAR2
 )
    RETURN VARCHAR2
 IS
    l_deptno       NUMBER;
    l_return_val   VARCHAR2 (2000);
BEGIN
    IF (p_schema_name = USER)
    THEN
       l_return_val := NULL;
    ELSE
       IF (SYS_CONTEXT ('DEPT_CTX', 'DEPTNO_LIST')) is null
       THEN
         l_return_val := '1=2';
       ELSE
         l_return_val := SYS_CONTEXT ('DEPT_CTX', 'DEPTNO_LIST');
       END IF;
    END IF;
    RETURN l_return_val;
END;
/

CREATE OR REPLACE PROCEDURE set_dept_ctx
IS
   l_str   VARCHAR2 (32767);
   l_ret   VARCHAR2 (32767);
BEGIN
   FOR deptrec IN (SELECT deptno
                     FROM emp_access
                    WHERE username = USER)
   LOOP
      l_str := l_str || deptrec.deptno || ',';
   END LOOP;

   IF l_str IS NULL
   THEN
      -- no access records found, no records
      -- should be displayed.
      l_ret := '1=2';
   ELSE
      l_str := RTRIM (l_str, ',');
      l_ret := 'DEPTNO IN (' || RTRIM (l_str, ',') || ')';
      DBMS_SESSION.set_context ('DEPT_CTX', 'DEPTNO_LIST', l_ret);
   END IF;
END;
/

grant execute on set_dept_ctx to allen;

BEGIN
   DBMS_RLS.drop_policy (
      object_schema       => 'SCOTT',
      object_name         => 'EMP',
      policy_name         => 'EMP_DEPT_POLICY'
   );
END;
/
BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_DEPT_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'AUTHORIZED_EMPS',
      statement_types      => 'SELECT, INSERT, UPDATE, DELETE',
      update_check         => TRUE,
      policy_type          => DBMS_RLS.context_sensitive,
      namespace            => 'DEPT_CTX',
      attribute            => 'DEPTNO_LIST'
   );
END;
/

conn allen/allen
EXEC vpdowner.set_dept_ctx

SELECT sys_context ('DEPT_CTX','DEPTNO_LIST') FROM dual;

SELECT distinct deptno FROM scott.emp;

DELETE emp_access WHERE username = 'ALLEN';
INSERT INTO emp_access values ('ALLEN',30); 

EXEC vpdowner.set_dept_ctx

SELECT distinct deptno FROM hr.emp;

CREATE CONTEXT web_ctx USING set_web_ctx;

CREATE OR REPLACE PROCEDURE set_web_ctx (
   p_webuser IN VARCHAR2
) IS
BEGIN
   DBMS_SESSION.set_context ('WEB_CTX', 'WEBUSER', p_webuser);
END;
/

EXEC set_web_ctx ('MARTIN')

EXEC DBMS_OUTPUT.put_line(sys_context('WEB_CTX','WEBUSER'))

CREATE OR REPLACE FUNCTION authorized_accounts (
   p_schema_name   IN   VARCHAR2,
   p_object_name   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_deptno       NUMBER;
   l_return_val   VARCHAR2 (2000);
BEGIN
   IF (p_schema_name = USER)
   THEN
      l_return_val := NULL;
   ELSE
      l_return_val :=
                  'acc_mgr = ''' || SYS_CONTEXT ('WEB_CTX', 'WEBUSER')
                  || '''';
   END IF;

   RETURN l_return_val;
END;
/

BEGIN
   DBMS_RLS.add_policy (
      object_schema        => 'SCOTT',
      object_name          => 'ACCOUNTS',
      policy_name          => 'ACCMAN_POLICY',
      function_schema      => 'VPDOWNER',
      policy_function      => 'AUTHORIZED_ACCOUNTS',
      statement_types      => 'SELECT, INSERT, UPDATE, DELETE',
      update_check         => TRUE,
      policy_type          => DBMS_RLS.context_sensitive,
      namespace            => 'WEB_CTX',
      attribute            => 'WEBUSER'
   );
END;
/

BEGIN
 DBMS_RLS.refresh_policy(
      object_schema        => 'SCOTT',
      object_name          => 'EMP',
      policy_name          => 'EMP_DEPT_POLICY'
 );
END;
/

conn scott/tiger
drop table accounts;
conn / as sysdba
drop user VPDOWNER cascade;




